import gradio as gr
import logging
import os
from pathlib import Path

from src.rag_pipeline import RAGPipeline
from config.settings import DATA_PATH, GRADIO_SHARE, GRADIO_PORT

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize RAG pipeline
rag_pipeline = None
try:
    from src.rag_pipeline import RAGPipeline

    rag_pipeline = RAGPipeline()
    logger.info("RAG Pipeline successfully initialized")
except ImportError as e:
    logger.error(f"Import error for RAG Pipeline: {e}")
    logger.error("Make sure all dependencies are installed:")
    logger.error("pip install sentence-transformers chromadb langchain langchain-openai")
except Exception as e:
    logger.error(f"Error initializing RAG Pipeline: {e}")
    import traceback

    traceback.print_exc()


def load_documents_interface():
    """Interface for loading documents"""
    if not rag_pipeline:
        return "‚ùå RAG Pipeline not initialized"

    try:
        result = rag_pipeline.load_documents()
        if result["success"]:
            return f"‚úÖ {result['message']}\nüìä Total in collection: {result['total_in_collection']} documents"
        else:
            return f"‚ùå {result['message']}"
    except Exception as e:
        logger.error(f"Error loading documents: {e}")
        return f"‚ùå Error: {str(e)}"


def get_system_status_text():
    """Get text representation of system status"""
    if not rag_pipeline:
        return "‚ùå RAG Pipeline not initialized"

    try:
        status = rag_pipeline.get_system_status()
        status_text = f"""
## üìä System Status

### üóÑÔ∏è Vector Store
- Status: {status['vector_store']['status']}
- Collection: {status['vector_store']['collection_name']}
- Documents: {status['vector_store']['documents_count']}
- Embedding model: {status['vector_store']['embedding_model']}

### ü§ñ LLM
- Status: {status['llm']['status']}
- Model: {status['llm']['model']}

### üìÅ Data Folder
- Path: {status['data_path']['path']}
- Exists: {status['data_path']['exists']}
- Files found: {status['data_path']['files_count']}
"""
        return status_text
    except Exception as e:
        return f"‚ùå Error getting status: {str(e)}"


def clear_vector_store_interface():
    """Interface for clearing vector store"""
    if not rag_pipeline:
        return "‚ùå RAG Pipeline not initialized"

    try:
        result = rag_pipeline.clear_vector_store()
        if result["success"]:
            return f"‚úÖ {result['message']}"
        else:
            return f"‚ùå {result['message']}"
    except Exception as e:
        logger.error(f"Error clearing vector store: {e}")
        return f"‚ùå Error: {str(e)}"


def search_documents_interface(query, k):
    """Interface for document search (debugging)"""
    if not rag_pipeline:
        return "‚ùå RAG Pipeline not initialized"

    if not query.strip():
        return "Enter a search query"

    try:
        results = rag_pipeline.search_documents(query, int(k))
        if not results:
            return "üîç No documents found"

        search_results = f"üîç Found {len(results)} documents:\n\n"
        for i, result in enumerate(results, 1):
            search_results += f"""
**{i}. {result['filename']}** (Score: {result['score']})
- Folder: {result['directory']}
- Chunk: {result['chunk_index']}

{result['content']}

---
"""
        return search_results
    except Exception as e:
        logger.error(f"Error searching documents: {e}")
        return f"‚ùå Error: {str(e)}"


def respond_to_user(message, history):
    """Main chat function"""
    if not rag_pipeline:
        return "‚ùå RAG Pipeline not initialized"

    if not message.strip():
        return "Please ask a question."

    try:
        logger.info(f"Processing user query: {message}")
        response = rag_pipeline.query(message)
        logger.info(f"Generated response of length: {len(response)}")
        return response
    except Exception as e:
        logger.error(f"Error processing question: {e}")
        return f"‚ùå An error occurred: {str(e)}"


def create_interface():
    """Create Gradio interface with maximum compatibility"""

    # CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    custom_css = """
    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
    .gradio-container {
        max-width: 1200px !important;
        margin: 0 auto !important;
        padding: 20px !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    .main {
        max-width: 1000px !important;
        margin: 0 auto !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ */
    .block {
        max-width: 100% !important;
        margin: 0 auto !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–±–æ—Ç–∞ */
    .chatbot {
        margin: 0 auto !important;
        max-width: 800px !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .input-container {
        max-width: 800px !important;
        margin: 0 auto !important;
    }

    /* –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø —à–∏—Ä–∏–Ω–∞ —à–∞–ø–∫–∏ - –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    .header-container {
        text-align: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 40px 30px;
        border-radius: 15px;
        margin: 0 auto 30px auto;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        width: 900px !important;           /* –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø —à–∏—Ä–∏–Ω–∞ */
        max-width: 900px !important;       /* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */
        min-width: 900px !important;       /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */
        box-sizing: border-box !important; /* –£—á–∏—Ç—ã–≤–∞–µ—Ç padding –∏ border */
        position: relative !important;     /* –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */
    }

    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 950px) {
        .header-container {
            width: calc(100vw - 40px) !important;
            min-width: auto !important;
            max-width: calc(100vw - 40px) !important;
        }
    }

    .header-title {
        color: white !important;
        font-size: 2.5em !important;
        font-weight: bold !important;
        margin-bottom: 10px !important;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        letter-spacing: 1px;
    }

    .header-subtitle {
        color: rgba(255, 255, 255, 0.9) !important;
        font-size: 1.2em !important;
        font-weight: 300 !important;
        margin-top: 10px !important;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
    .custom-button {
        border-radius: 8px !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
    }

    .custom-button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2) !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ */
    .tab-nav {
        display: flex !important;
        justify-content: center !important;
        margin-bottom: 20px !important;
    }

    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π */
    .tabitem {
        max-width: 900px !important;
        width: 900px !important;           /* –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        margin: 0 auto !important;
        padding: 20px !important;
        box-sizing: border-box !important;
    }

    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫ */
    @media (max-width: 950px) {
        .tabitem {
            width: calc(100vw - 40px) !important;
            max-width: calc(100vw - 40px) !important;
        }
    }

    /* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */
    .gradio-interface {
        width: 100% !important;
        max-width: 900px !important;
        margin: 0 auto !important;
    }
    """

    with gr.Blocks(
            title="ü§ñ RAG System",
            css=custom_css
    ) as interface:

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        with gr.Column(elem_classes="gradio-interface"):
            # –ö—Ä–∞—Å–∏–≤–∞—è —à–∞–ø–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
            gr.HTML("""
            <div class="header-container">
                <h1 class="header-title">ü§ñ RAG System with ChromaDB</h1>
                <p class="header-subtitle">Intelligent question-answering system based on your documents</p>
            </div>
            """)

        with gr.Tab("üí¨ Chat"):
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
            with gr.Column(elem_classes="chat-container"):
                gr.Markdown("### üí¨ Chat with your documents")
                gr.Markdown("*Ask questions about your uploaded documents and get intelligent responses*")

                # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                chatbot = gr.Chatbot(
                    label="Chat History",
                    height=500,
                    elem_classes="chatbot"
                )

                # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞
                with gr.Column(elem_classes="input-container"):
                    with gr.Row():
                        msg = gr.Textbox(
                            label="Your message",
                            placeholder="Ask a question about your documents...",
                            scale=4,
                            container=False
                        )
                        submit_btn = gr.Button("Send üì§", variant="primary", scale=1, elem_classes="custom-button")

                    clear_btn = gr.Button("Clear Chat üóëÔ∏è", variant="secondary", elem_classes="custom-button")

            # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞
            def user_message(message, history):
                if not message.strip():
                    return "", history
                return "", history + [[message, None]]

            def bot_response(history):
                if not history or not history[-1][0]:
                    return history

                user_msg = history[-1][0]
                response = respond_to_user(user_msg, history)
                history[-1][1] = response
                return history

            def clear_chat():
                return [], ""

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            msg.submit(
                user_message,
                [msg, chatbot],
                [msg, chatbot],
                queue=False
            ).then(
                bot_response,
                chatbot,
                chatbot
            )

            submit_btn.click(
                user_message,
                [msg, chatbot],
                [msg, chatbot],
                queue=False
            ).then(
                bot_response,
                chatbot,
                chatbot
            )

            clear_btn.click(
                clear_chat,
                outputs=[chatbot, msg],
                queue=False
            )

        with gr.Tab("üìö Documents"):
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            with gr.Column(elem_classes="tabitem"):
                gr.Markdown(f"""
                ### üìÅ Documents Folder: `{DATA_PATH}`
                **Supported formats:** üìÑ TXT ‚Ä¢ üìã PDF ‚Ä¢ üìù DOCX ‚Ä¢ üìë MD ‚Ä¢ üìä CSV

                Upload your documents to the data folder and click "Load Documents" to start chatting with your files.
                """)

                with gr.Row():
                    load_btn = gr.Button("üì• Load Documents", variant="primary", size="lg", elem_classes="custom-button")
                    clear_db_btn = gr.Button("üóëÔ∏è Clear Database", variant="secondary", size="lg",
                                             elem_classes="custom-button")

                load_status = gr.Textbox(
                    label="üìã Status",
                    lines=6,
                    max_lines=10,
                    placeholder="Status information will appear here..."
                )

                load_btn.click(load_documents_interface, outputs=[load_status])
                clear_db_btn.click(clear_vector_store_interface, outputs=[load_status])

        with gr.Tab("‚öôÔ∏è System Status"):
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            with gr.Column(elem_classes="tabitem"):
                status_display = gr.Markdown(get_system_status_text())
                refresh_btn = gr.Button("üîÑ Refresh Status", variant="primary", size="lg", elem_classes="custom-button")

                refresh_btn.click(get_system_status_text, outputs=[status_display])

        with gr.Tab("üîç Search & Debug"):
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
            with gr.Column(elem_classes="tabitem"):
                gr.Markdown("""
                ### üîç Search in Vector Database
                *This tab is for debugging and testing document search functionality*
                """)

                with gr.Row():
                    search_input = gr.Textbox(
                        label="üîé Search Query",
                        placeholder="Enter search terms to find relevant documents...",
                        scale=3
                    )
                    search_k = gr.Number(
                        label="üìä Results Count",
                        value=5,
                        minimum=1,
                        maximum=20,
                        scale=1
                    )

                search_btn = gr.Button("üîç Search Documents", variant="primary", size="lg", elem_classes="custom-button")

                search_output = gr.Markdown(
                    label="üìã Search Results",
                    value="*Search results will appear here...*"
                )

                search_btn.click(
                    search_documents_interface,
                    inputs=[search_input, search_k],
                    outputs=[search_output]
                )

                search_input.submit(
                    search_documents_interface,
                    inputs=[search_input, search_k],
                    outputs=[search_output]
                )

    return interface


def main():
    """Main function to start the application"""
    logger.info("üöÄ Starting RAG system...")

    # Check for necessary folders
    os.makedirs(DATA_PATH, exist_ok=True)
    os.makedirs("chroma_db", exist_ok=True)

    # Create and launch interface
    interface = create_interface()

    logger.info(f"üåê Starting Gradio interface on port {GRADIO_PORT}")
    logger.info(f"üìÇ Data folder: {DATA_PATH}")
    logger.info(f"üóÑÔ∏è Database folder: chroma_db/")

    # Launch Gradio interface
    interface.launch(
        share=GRADIO_SHARE,
        server_port=GRADIO_PORT,
        show_error=True,
        server_name="0.0.0.0",
        inbrowser=True  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    )


if __name__ == "__main__":
    main()